#include <iostream>
#include <vector>
using namespace std;

class Matrix {
    int rows, cols;
    vector<vector<int>> data;

public:
    Matrix(int r = 0, int c = 0) {
        rows = r;
        cols = c;
        data.resize(rows, vector<int>(cols));
    }

    void input() {
        cout << "Enter elements of " << rows << "x" << cols << " matrix:\n";
        for (int i = 0; i < rows; i++)
            for (int j = 0; j < cols; j++)
                cin >> data[i][j];
    }

    void display() {
        cout << "Matrix:\n";
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++)
                cout << data[i][j] << " ";
            cout << endl;
        }
    }

    Matrix add(Matrix &m) {
        if (rows != m.rows || cols != m.cols)
            throw "Addition not possible: Dimensions don't match!";
        
        Matrix result(rows, cols);
        for (int i = 0; i < rows; i++)
            for (int j = 0; j < cols; j++)
                result.data[i][j] = data[i][j] + m.data[i][j];
        return result;
    }

    Matrix multiply(Matrix &m) {
        if (cols != m.rows)
            throw "Multiplication not possible: Column of A != Row of B!";
        
        Matrix result(rows, m.cols);
        for (int i = 0; i < rows; i++)
            for (int j = 0; j < m.cols; j++)
                for (int k = 0; k < cols; k++)
                    result.data[i][j] += data[i][k] * m.data[k][j];
        return result;
    }

    Matrix transpose() {
        Matrix result(cols, rows);
        for (int i = 0; i < rows; i++)
            for (int j = 0; j < cols; j++)
                result.data[j][i] = data[i][j];
        return result;
    }
};

int main() {
    int r1, c1, r2, c2, choice;
    cout << "Enter rows and columns of Matrix A: ";
    cin >> r1 >> c1;
    Matrix A(r1, c1);
    A.input();

    cout << "Enter rows and columns of Matrix B: ";
    cin >> r2 >> c2;
    Matrix B(r2, c2);
    B.input();

    do {
        cout << "\n---- MENU ----\n";
        cout << "1. Add\n";
        cout << "2. Multiply\n";
        cout << "3. Transpose Matrix A\n";
        cout << "4. Transpose Matrix B\n";
        cout << "5. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;

        try {
            switch (choice) {
                case 1: {
                    Matrix C = A.add(B);
                    C.display();
                    break;
                }
                case 2: {
                    Matrix C = A.multiply(B);
                    C.display();
                    break;
                }
                case 3: {
                    Matrix T = A.transpose();
                    T.display();
                    break;
                }
                case 4: {
                    Matrix T = B.transpose();
                    T.display();
                    break;
                }
                case 5:
                    cout << "Exiting program.\n";
                    break;
                default:
                    cout << "Invalid choice!\n";
            }
        } catch (const char* msg) {
            cout << "Error: " << msg << endl;
        }
    } while (choice != 5);

    return 0;
}
