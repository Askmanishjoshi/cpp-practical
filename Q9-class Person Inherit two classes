#include <iostream>
using namespace std;

// Base class
class Person {
protected:
    string name;

public:
    Person(string n) {
        name = n;
    }

    // Virtual function for runtime polymorphism
    virtual void display() {
        cout << "Name: " << name << endl;
    }

    // Virtual destructor (important for cleanup in polymorphism)
    virtual ~Person() {}
};

// Derived class: Student
class Student : public Person {
private:
    string course;
    int marks;
    int year;

public:
    Student(string n, string c, int m, int y) : Person(n) {
        course = c;
        marks = m;
        year = y;
    }

    void display() override {
        cout << "Student Name: " << name << endl;
        cout << "Course: " << course << endl;
        cout << "Marks: " << marks << endl;
        cout << "Year: " << year << endl;
    }
};

// Derived class: Employee
class Employee : public Person {
private:
    string department;
    float salary;

public:
    Employee(string n, string dept, float sal) : Person(n) {
        department = dept;
        salary = sal;
    }

    void display() override {
        cout << "Employee Name: " << name << endl;
        cout << "Department: " << department << endl;
        cout << "Salary: " << salary << endl;
    }
};

int main() {
    // Base class pointer
    Person* personPtr;

    // Create a Student object
    Student s("Alice", "Computer Science", 92, 2);
    personPtr = &s;
    cout << "--- Student Info ---\n";
    personPtr->display();  // Runtime polymorphism

    // Create an Employee object
    Employee e("Bob", "HR", 55000.0);
    personPtr = &e;
    cout << "\n--- Employee Info ---\n";
    personPtr->display();  // Runtime polymorphism

    return 0;
}
